y=daily_giga_cost, size=calls_mins, color=mobile_network_operator))
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Italian Mobile Telecomunication Market"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
column(10,
sliderInput("slider1", h3("Days from Iliad entry"),
min = -1000, max = 1000, value = c(-1000,1000))),
checkboxGroupInput("checkGroup", label = h3("Operator"),
choices = c("Vodafone","TIM","Wind","Iliad"))
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.
z    <-subset(Dataset_Telecomunication, (Dataset_Telecomunication$time_from_iliad_entry>input$slider1[1] & Dataset_Telecomunication$time_from_iliad_entry<input$slider1[2]) & Dataset_Telecomunication$mobile_network_operator == input$checkGroup)
ggplot(z) + geom_point(aes(x=time_from_iliad_entry,
y=daily_giga_cost, size=calls_mins, color=mobile_network_operator))
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.
z    <-subset(Dataset_Telecomunication, (Dataset_Telecomunication$time_from_iliad_entry>input$slider1[1] & Dataset_Telecomunication$time_from_iliad_entry<input$slider1[2]) & Dataset_Telecomunication$mobile_network_operator %in% input$checkGroup)
ggplot(z) + geom_point(aes(x=time_from_iliad_entry,
y=daily_giga_cost, size=calls_mins, color=mobile_network_operator))
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
runApp()
ggplot(Dataset_Telecomunication) + geom_point(aes(x=time_from_iliad_entry, y=daily_giga_cost, color=mobile_network_operator))
Dataset_Telecomunication <- read_excel("Dataset_Telecomunication.xlsx")
ggplot(Dataset_Telecomunication) + geom_point(aes(x=time_from_iliad_entry, y=daily_giga_cost, color=mobile_network_operator))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
input$selct
runApp()
input$select
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
help(siderbarlayout)
help(sidebarLayout)
help("mainPanel")
sidebarLayout
help(mainPanel)
help(sidebarPanel)
help(selctInput)
??selctInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(titlePanel)
runApp()
shiny::runApp()
shiny::runApp()
install.packages(c("mapproj", "maps", "tidyverse"))
library(shiny)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(maps)
library(mapproj)
runApp('C:/Users/lucad/OneDrive/Desktop/CODING FOR DATA SCIENCE/R coding/app robi.R')
runApp('C:/Users/lucad/OneDrive/Desktop/CODING FOR DATA SCIENCE/R coding/app robi.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a<-Dataset_Telecomunication[,14]
a
Dataset_Telecomunication <- read_excel("Dataset_Telecomunication.xlsx")
a<-Dataset_Telecomunication[,14]
a
b<-Dataset_Telecomunication[,25]
b
runApp()
runApp()
help(rdplot)
View(a)
a<-Dataset_Telecomunication[,14]
b<-Dataset_Telecomunication[,25]
rdplot(b, a, c = 0, p = 4)
rdplot(a, b, c = 0, p = 4)
rdplot(a, b, c = 0, p = 4)
rdplot(Dataset_Telecomunication[,25],Dataset_Telecomunication[,14] , c = 0, p = 4)
rdplot(b, a)
rdplot(Dataset_Telecomunication$aggregated_index_cost, Dataset_Telecomunication$time_from_iliad_entry, c = 0, p = 4)
runApp()
runApp()
rdplot(Dataset_Telecomunication$aggregated_index_cost, Dataset_Telecomunication$time_from_iliad_entry, c = 0, p = 1)
rdplot(Dataset_Telecomunication$aggregated_index_cost, Dataset_Telecomunication$time_from_iliad_entry, c = 0, p = 2)
runApp()
a<-"2"
b<-int(a)
runApp()
runApp()
runApp()
rdrobust(Dataset_Telecomunication$aggregated_index_cost, Dataset_Telecomunication$time_from_iliad_entry, c = 0, fuzzy = NULL, p = NULL)
rdrobust(Dataset_Telecomunication$aggregated_index_cost, Dataset_Telecomunication$time_from_iliad_entry, c = 0, fuzzy = NULL, p = NULL)
print(rdrobust(Dataset_Telecomunication$aggregated_index_cost, Dataset_Telecomunication$time_from_iliad_entry, c = 0, fuzzy = NULL, p = NULL))
help(rdrobust)
help(rdrobust)
rdrobust(Dataset_Telecomunication$aggregated_index_cost, Dataset_Telecomunication$time_from_iliad_entry, c = 0, fuzzy = NULL, p = NULL)
rdrobust(Dataset_Telecomunication$aggregated_index_cost, Dataset_Telecomunication$time_from_iliad_entry, c = 0, fuzzy = NULL, p = NULL)
help(rdrobust)
rdrobust(Dataset_Telecomunication$aggregated_index_cost, Dataset_Telecomunication$time_from_iliad_entry, c = 0, fuzzy = NULL, p = NULL)
k<-rdrobust(Dataset_Telecomunication$aggregated_index_cost, Dataset_Telecomunication$time_from_iliad_entry, c = 0, fuzzy = NULL, p = NULL)
k
k[1]
k[2]
k[1]
k[1][1]
k$Estimate[1]
k[2]
k[3]
k[4]
k[5]
k[6]
k[7]
runApp()
runApp()
k<-rdrobust(Dataset_Telecomunication$aggregated_index_cost, Dataset_Telecomunication$time_from_iliad_entry, c = 0, fuzzy = NULL, p = NULL)
k
k[1]
k[2]
k[3]
k[4]
k[5]
k[8]
k[9]
k[10]
k[11]
k[12]
k[13]
k[14]
k[15]
k[16]
k[17]
k[18]
k[19]
k[20]
k[21]
k[22]
k[23]
k[24]
k[25]
k[26]
k[27]
k[28]
k[29]
k[30]
k$Estimate[1]
k[7]
k[6]
k$ci[1]
k$ci[1,2]
k$ci[c(1,2)]
k$ci[2]
k$ci[1]
k$ci[1,2]
k$pv[1]
options(k$pv[1],scipen=999)
b<-k$pv[1]
options(b,scipen=999)
b
help(options)
k$pv[1]
options(scipen=999)
k$pv[1]
runApp()
runApp()
k<-rdrobust(Dataset_Telecomunication$aggregated_index_cost, Dataset_Telecomunication$time_from_iliad_entry, c = 0, fuzzy = NULL, p = NULL)
c<-k$Estimate[1]
coefintl<-k$ci[1]
coefintr<-k$ci[1,2]
runApp()
runApp()
c
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a<-bquote("alfa")
print(a)
help(bquote)
runApp()
runApp()
runGitHub("UsElection_Data", "RobertoStaino")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help("htmlOutput")
help(verbatimTextOutput)
help(switch)
a<-1
dependent_variable <- switch (a,
1, "this var is",
2, "no"
)
dependent_variable
a<-1
dependent_variable <- switch (a,"this var is"
)
dependent_variable
a<-2
dependent_variable <- switch (a,"this var is","no"
)
dependent_variable
a<-"alfa"
dependent_variable <- switch (a,
alfa= "this var is",
beta= "no"
)
dependent_variable
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
help("helpText")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help("GeomPoint")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(rdplot)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help("sidebarPanel")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
help("switch")
runApp()
a<-c("alfa","beta","gamma")
if ("alfa" %in% a) print(vodafone)
a<-c("alfa","beta","gamma")
if ("alfa" %in% a) print("vodafone")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
i<-input$checkGroup
runApp()
runApp()
runApp()
runApp()
runApp()
if ("H3G" %in% input$checkGroup) h3g="H3G" else h3g=""
output$operator <- renderText({ if ("TIM" %in% input$checkGroup) tim="TIM" else tim=""
if ("H3G" %in% input$checkGroup) h3g="H3G" else h3g=""
if ("H3G" %in% input$checkGroup) h3g="H3G" else h3g=""
if ("H3G" %in% input$checkGroup) h3g="H3G" else h3g=""
if ("H3G" %in% input$checkGroup) h3g="H3G" else h3g=""
if ("H3G" %in% input$checkGroup) h3g="H3G" else h3g=""
if ("H3G" %in% input$checkGroup) h3g="H3G" else h3g=""
if ("H3G" %in% input$checkGroup) h3g="H3G" else h3g=""
if ("H3G" %in% input$checkGroup) h3g="H3G" else h3g=""paste(tim, h3g)})
if ("H3G" %in% input$checkGroup) h3g="H3G" else h3g=""
runApp()
runApp()
("Vodafone","TIM","Wind","H3G","Wind Tre","Iliad","CoopVoce","Fastweb","Kena Mobile","PosteMobile", "Spusu", "Tiscali","UnoMobile","Very Mobile"
help(paste)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
help(cat)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
setwd("C:/Users/lucad/OneDrive/Desktop/CODING FOR DATA SCIENCE/Mobile_Telecomunication_Market")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
